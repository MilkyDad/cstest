const questions = [
    new Question("Что означает модификатор virtual?", [
        new Answer("Метод становится виртуальным", 0),
        new Answer("От класса, помеченым virtual, нельзя наследовать", 0),
        new Answer("Метод возможно будет переопределить", 1),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Как в C# может быть реализовано множественное наследование?", [
        new Answer("От 2-х и более классов", 0),
        new Answer("От 2-х и более интерфейсов", 1),
        new Answer("От 2-х классов и интерфейсов", 0),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("От какого класса наследуются остальные классы в C#?", [
        new Answer("System.Object", 1),
        new Answer("System.MainClass", 0),
        new Answer("System.StaticClass", 0),
        new Answer("System.PrivateClass", 0)
    ]),
    new Question("Выберите правильный вариант ответа:", [
        new Answer("В интерфейсе определяется тело метода", 1),
        new Answer("В абстрактном классе нельзя использовать модификатор доступа private", 0),
        new Answer("Методы описанные в интерфейсе обязательны к реализации", 1),
        new Answer("Экземпляр созданный от абстрактного класса имеет встроенный метод ToString()", 0)
    ]),
    new Question("class ChildClass ? ParentClass", [
        new Answer("inherit", 0),
        new Answer(";", 0),
        new Answer("extends", 0),
        new Answer(":", 1)
    ]),
    new Question("Можно ли запретить наследование от своего собственного класса?", [
        new Answer("Нет, нельзя", 0),
        new Answer("Можно, только если модификатор доступа не указан как protected", 0),
        new Answer("Используя ключевое слово notInheritable", 0),
        new Answer("Используя ключевое слово sealed", 1)
    ]),
    new Question("Как создать новый экземпляр от абстрактного класса?", [
        new Answer("С помощью конструкции: AbstractClass myClass = new AbstractClass()", 0),
        new Answer("С помощью конструкции: create myClass = new AbstractClass()", 0),
        new Answer("С помощью конструкции: new AbstractClass = myClass()", 0),
        new Answer("В С# не реализовано создание экземпляра абстрактного класса", 1)
    ]),
    new Question("Какой модификатор доступа нельзя указывать в методах интерфейса?", [
        new Answer("private", 0),
        new Answer("protected", 0),
        new Answer("internal", 0),
        new Answer("Все ответы - правильные", 1)
    ]),
    new Question("C# - язык:", [
        new Answer("Компилируемый", 0),
        new Answer("Интерпритируемый", 0),
        new Answer("Байткодовый", 1),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Для чего могут использоваться свойства?", [
        new Answer("Свойства являются не более чем синтаксическим сахаром", 0),
        new Answer("Для доступа к закрытым полям класса", 1),
        new Answer("Для перезаписи удалённых полей класса", 0),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Модификатор override применим к:", [
        new Answer("Методам", 1),
        new Answer("Свойствам", 1),
        new Answer("Все ответы выше - правильные", 2),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Может ли класс реализовать две интерфейса, в которых имеются одинаковые методы?", [
        new Answer("Да, если имя интерфейса отличается", 0),
        new Answer("Нет, надо менять имя метода", 0),
        new Answer("Да, при явном указании интерфейса", 1),
        new Answer("Нет, С# не предусматривает такой возможности", 0)
    ]),
    new Question("Наследуются ли переменные с модификатором private?", [
        new Answer("Нет, но можно реализовать метод", 0),
        new Answer("Только при наследовании от родительского класса", 0),
        new Answer("Да, но они не являются доступными", 1),
        new Answer("Нет, такая возможность в C# не предусмотрена ", 0)
    ]),
    new Question("Кому доступны переменные с модификатором protected на уровне класса?", [
        new Answer("Любому унаследованному классу", 1),
        new Answer("Всем, кто находится в этом же файле", 0),
        new Answer("Всем, кто находится в этой же сборке", 0),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Можно ли разрешить наследование класса, но запретить переопределение метода?", [
        new Answer("Да, class - public, метод - override", 0),
        new Answer("Да, class - private, метод - overwrite", 0),
        new Answer("Да, class - virtual, метод - override ", 0),
        new Answer("Да, class - public, метод - sealed", 1),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Ключевое слово partial совместно с классом (другими классами) при компиляции образует:", [
        new Answer("Целый класс", 1),
        new Answer("Несколько частичных классов", 0),
        new Answer("Несколько частичных (если названия методов разные) и один целый класс", 0),
        new Answer("Нет правильного ответа", 0)
    ]),
    new Question("Модификатор доступа по умолчанию, если не указан:", [
        new Answer("private", 0),
        new Answer("public", 1),
        new Answer("protected", 0),
        new Answer("default", 0)
    ]),
    new Question("Ключево слово base используется для:", [
        new Answer("Создания базы данных MS Access и работой с ней в проекте", 0),
        new Answer("Для перезаписи базовых свойств", 0),
        new Answer("Для наследования параметров из базового класса", 1),
        new Answer("Все ответы, в зависимости от ситуации - правильные", 0)
    ]),
    new Question("Сколько параметров по умолчанию имеет конструктор класса?", [
        new Answer("Один (default_value)", 0),
        new Answer("Два и более параметра", 0),
        new Answer("Если указать ключевое clear - то их не будет", 0),
        new Answer("Конструктор по умолчанию не имеет конструктора", 1)
    ]),
    new Question("Ключевое слово new может использоваться для:", [
        new Answer("Сокрытия методов тем самым полностью позволяя изменить их функционал", 0),
        new Answer("Для выделения памяти новому экземпляру класса", 0),
        new Answer("Сокрытия свойств", 0),
        new Answer("Все ответы - правильные", 1)
    ]),
];

const results = [
    new Result("Вы полный 0", 0),
    new Result("Чуть больше, чем ничего", 5),
    new Result("Вы что-то знаете, но, не до конца", 10),
    new Result("Отличный результат, правда", 15),
    new Result("0_0", 20),
    new Result("Вы очень большой молодец, раз набрали 21 очко", 21)
];
// ответы можно тут глянуть, но, учитывая уровень знаний наших некоторых студентов, не думаю, что до такого дойдёт
// был бы сервер, можно было бы хранить на нём, в виде MD5